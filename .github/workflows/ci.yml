---
name: CI
on:
  schedule:
    # run every Sunday to re-populate caches after they are cleaned on Saturday
    - cron: "0 12 * * 0"
  push:
    branches:
      - main
      - release/*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  test:
    name: Test
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.16.x
        kubernetes_version:
          # https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html
          - 1.15.11
          - 1.16.8
        build_tags: [""]
        os: [ubuntu-latest]
        may-fail: [false]

        include:
          - go-version: tip
            kubernetes_version: 1.16.8
            build_tags: ""
            os: ubuntu-latest
            may-fail: true

    continue-on-error: ${{ matrix.may-fail }}
    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v -tags='${{ matrix.build_tags }}'
      KUBERNETES_VERSION: ${{ matrix.kubernetes_version }}
      MINIKUBE_IN_STYLE: 1
      CHANGE_MINIKUBE_NONE_USER: true

    steps:
      - name: Set up Go release
        if: matrix.go-version != 'tip'
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Go tip
        if: matrix.go-version == 'tip'
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH

      - name: Set GO_VERSION environment variable
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        run: |
          go version
          echo "GO_VERSION=$(go version)" >> $GITHUB_ENV

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2

      # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources
      # https://minikube.sigs.k8s.io/docs/drivers/none/
      - name: Configure minikube
        run: |
          sudo apt install -y conntrack
          sudo curl -Lo /tmp/minikube https://github.com/kubernetes/minikube/releases/download/v1.16.0/minikube-linux-amd64
          sudo chmod +x /tmp/minikube
          sudo mv /tmp/minikube $(which minikube)
          sudo -E minikube config set driver none
          sudo -E minikube config set cpus 2
          sudo -E minikube config set memory 4096

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Download Go modules
        run: go mod download

      - name: Install tools
        run: make init

      - name: Initialize CI environment
        run: make ci-init

      - name: Generate code
        run: make gen

      - name: Install binaries
        run: make release install

      - name: Check that API tests can be built
        run: make test-api-build

      - name: Start development environment
        run: sudo -E make env-up

      - name: Run tests
        run: |
          go clean -testcache
          make test-crosscover

      - name: Upload coverage results
        uses: percona-platform/codecov-action@v1
        with:
          file: crosscover.out
          flags: crosscover
          env_vars: GO_VERSION,KUBERNETES_VERSION
          fail_ci_if_error: false

      - name: Collect debugdata
        if: ${{ always() }}
        run: make collect-debugdata

      - name: Upload debugdata
        if: ${{ always() }}
        uses: percona-platform/upload-artifact@v2
        with:
          name: debugdata
          path: ./debugdata

      # - name: Setup tmate session on failure
      #   if: ${{ failure() }}
      #   uses: percona-platform/action-tmate@v2

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (code generation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status

  test-on-eks:
    name: Test on EKS
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.16.x
        build_tags: [""]
        os: [ubuntu-latest]
        may-fail: [false]
        include:
          - go-version: tip
            build_tags: ""
            os: ubuntu-latest
            may-fail: true

    continue-on-error: ${{ matrix.may-fail }}
    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v -tags='${{ matrix.build_tags }}'
      # Set DELETE_NAMESPACE to false when you want to debug in EKS cluster after job is done.
      DELETE_NAMESPACE: true
    steps:
      - name: Set up Go release
        if: matrix.go-version != 'tip'
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Go tip
        if: matrix.go-version == 'tip'
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH

      - name: Set GO_VERSION environment variable
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        run: |
          go version
          echo "GO_VERSION=$(go version)" >> $GITHUB_ENV

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Download Go modules
        run: go mod download

      - name: Install tools
        run: |
          make init
          mkdir -p "${DBAAS_TOOLS_PATH}"
          echo "${DBAAS_TOOLS_PATH}" >> $GITHUB_PATH          
          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          mv aws-iam-authenticator "${DBAAS_TOOLS_PATH}"
          # dbaas-controller tries to search for kubectl at certain path
          cp $(which kubectl) "${DBAAS_TOOLS_PATH}/kubectl-1.16"
        env:
          DBAAS_TOOLS_PATH: "/opt/dbaas-tools/bin"

      - name: Initialize CI environment
        run: make ci-init

      - name: Generate code
        run: make gen

      - name: Install binaries
        run: make release install

      - name: Check that API tests can be built
        run: make test-api-build

      - name: Setup environment for tests to run
        id: setupenv
        run: |
           export PATH_TO_KUBECONFIG="${HOME}/.kube/config"
           mkdir -p "${PATH_TO_KUBECONFIG%/*}"
           echo "${BASE64_KUBECONFIG}" > "${PATH_TO_KUBECONFIG}"
           export RANDOM_STRING=$(cat /proc/sys/kernel/random/uuid)
           export NAMESPACE="dbaas-controller-test-${RANDOM_STRING}"
           make eks-setup-test-namespace NAMESPACE="${NAMESPACE}"
           echo "::set-output name=done::1"
        env:
           BASE64_KUBECONFIG: ${{secrets.BASE64_KUBECONFIG}}

      - name: Run tests
        if: steps.setupenv.outputs.exit_code == 0 && steps.setupenv.outputs.done == '1'
        run: |
          go clean -testcache
          make test-crosscover

      - name: Upload coverage results
        uses: percona-platform/codecov-action@v1
        with:
          file: crosscover.out
          flags: crosscover
          env_vars: GO_VERSION,KUBERNETES_VERSION
          fail_ci_if_error: false
      
      - name: Report Kubernetes resources count and state
        if: always() && steps.setupenv.outputs.exit_code == 0 && steps.setupenv.outputs.done == '1'
        run: |
          echo "Kubernetes resources counts:"
          echo "Namespaces: $(kubectl get ns | tail +2 | wc -l)"
          echo "Persistent volumes: $(kubectl get pv | tail +2 | wc -l)"
          echo "Pods: $(kubectl get pod | tail +2 | wc -l)"
          echo "State of all pods:"
          kubectl describe pods

      - name: Delete the test namespace
        if: always() && steps.setupenv.outputs.exit_code == 0 && steps.setupenv.outputs.done == '1' && env.DELETE_NAMESPACE
        run: |
          make eks-cleanup-namespace
          make eks-delete-operators
          make eks-delete-current-namespace

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (code generation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
          kubectl version

  check:
    name: Check
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        go-version: [1.16.x]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2
        with:
          lfs: true

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Download Go modules
        run: go mod download

      - name: Install tools
        run: make init

      - name: Run checks/linters
        run: |
          bin/check-license

          # use GITHUB_TOKEN because only it has access to GitHub Checks API
          bin/golangci-lint run -c=.golangci-required.yml --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} bin/reviewdog -f=golangci-lint -name='Required checks' -reporter=github-pr-check

          # we can't use ROBOT_TOKEN in public repo; use GITHUB_TOKEN there too
          bin/golangci-lint run --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} bin/reviewdog -f=golangci-lint -name='Linters' -reporter=github-pr-review

          # run it like that until some of those issues/PRs are resolved:
          # * https://github.com/quasilyte/go-consistent/issues/33
          # * https://github.com/golangci/golangci-lint/issues/288
          # * https://github.com/reviewdog/errorformat/pull/47 (once it is actually used by reviewdog)
          bin/go-consistent -pedantic -exclude "tests" ./...
          cd tests && ../bin/go-consistent -pedantic ./...

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (tools installation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
